.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LARD.CONF 1"
.TH LARD.CONF 1 "2005-03-06" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
lard.conf \- lard configuration file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This configuration file is read by \fIlard\fR\|(8) on startup.
.PP
The configuration file consists of \fBkeyword\fR \- \fBvalue\fR pairs describing
logfiles and options.
.Sh "Global options"
.IX Subsection "Global options"
Global options describe parameters that only make sens in a global context,
like \fBlisten\fR and \fBsocket\fR. All other options are default parameters
for the logging rules.
.PP
The global section is defined as everything up to the first \fBrule\fR. A
rule starts with one of the following keywords: \fBfile\fR, \fBpipe\fR,
\&\fBcommand\fR or \fBhost\fR. Once any of these keywords is encountered,
all keywords are assiciated with this rule-starting keyword, until
a new rule-starting keyword is encountered.
.IP "\fBlisten\fR {\s-1IP\s0 address|IP addres:port}" 4
.IX Item "listen {IP address|IP addres:port}"
Define the \s-1IP\s0 address and optionally the \s-1UDP\s0 port where the daemon
will listen on in remote reception mode (\fB\-r\fR).
.IP "\fBsocket\fR {filename}" 4
.IX Item "socket {filename}"
Define an alternative \s-1UNIX\s0 socket to look for incoming local syslog
messages instead of '/dev/log'/
.Sh "Rules"
.IX Subsection "Rules"
A (new) rule starts with a rule-starting keyword as described above.
This rule inherits default values for globally defined parameters such
as \fBkeep\fR, \fBrotate\fR, and \fBcompress\fR. Locally defined options
override any globally defined ones. Some of these parameters
have system defaults.
.IP "\fBfile\fR {filename}" 4
.IX Item "file {filename}"
Define a new rule that will append messages into a logfile.
.IP "\fBpipe\fR {pipename}" 4
.IX Item "pipe {pipename}"
Define a new rule that will keep a pipe open and write messages
into it.
.IP "\fBcommand\fR {command}" 4
.IX Item "command {command}"
Define a new rule that will spawn a command for every message
that matches the logging criteria. The message is passed as
commandline parameter to the command. This may be unsafe!
.IP "\fBhost\fR {hostname}" 4
.IX Item "host {hostname}"
Define a new rule that sends matching messages to a remote
logging host.
.ie n .IP "\fBrotate\fR {""hourly""|""daily""|""weekly""|""monthly""|[size]}" 4
.el .IP "\fBrotate\fR {``hourly''|``daily''|``weekly''|``monthly''|[size]}" 4
.IX Item "rotate {hourly|daily|weekly|monthly|[size]}"
This option describes when a logfile needs to be rotated and only
applies to the \fBfile\fR rule.
.IP "\fBkeep\fR {number}" 4
.IX Item "keep {number}"
Define the number of old logfiles to keep before deleting the oldest
one during rotation.
.ie n .IP "\fBcompress\fR {""gzip""|""bzip2""|""none""}" 4
.el .IP "\fBcompress\fR {``gzip''|``bzip2''|``none''}" 4
.IX Item "compress {gzip|bzip2|none}"
Define the type of compression used to compress logfiles when
they are rotated. \*(L"none\*(R" means no compression.
.IP "\fBlog\fR {facility.priority}" 4
.IX Item "log {facility.priority}"
Define which facility and priority must be matched on this rule.
A '*' for the priority or facility means \*(L"all\*(R", such that:
.Sp
.Vb 1
\&    *.*
.Ve
.Sp
would match all incoming messages of all facilities and priorities.
.Sp
A facility may be a comma-separated list of multiple facilities:
.Sp
.Vb 1
\&    local0,local1,local3.*
.Ve
.Sp
And even so for the priority:
.Sp
.Vb 1
\&    *.debug,info
.Ve
.Sp
A facility or priority may even be negated with a '!' character,
which results in the rule \s-1NOT\s0 matching that priority/facility:
.Sp
.Vb 1
\&    *.!debug
.Ve
.Sp
For a list of facilites and priorities, see \fIsyslog\fR\|(8).
.IP "\fBmatch\fR {expression}" 4
.IX Item "match {expression}"
On top of the priority and facility, a message must also match
this regular expression. The expression can include perl-like
regular expression directly. The following example would match
all messages that appear to be coming from the ssh daemon:
.Sp
.Vb 1
\&    match " sshd\e[\ed+\e]: "
.Ve
.IP "\fBformat\fR {format\-string}" 4
.IX Item "format {format-string}"
The format string allows you to specify an alternative message
layout. The layout is a string with keywords that will be
substituted for every message:
.Sp
.Vb 1
\&    format "%{TIMESTAMP} %{HOSTNAME} %{MSG}\en"
.Ve
.Sp
The %{keyword} words have specific meaning of course.
.Sp
.Vb 5
\&    %{TIMESTAMP} - the time the message was sent
\&    %{HOSTNAME} - the originating hostname of a message
\&    %{MSG} - the message data
\&    %{facility} - the message facility printed out
\&    %{priority} - the message priority printed out
.Ve
.Sp
The following fields are also available but should be used with
caution:
.Sp
.Vb 10
\&    %{facility_code} - the facility code (binary)
\&    %{priority_code} - the priority code (binary)
\&    %{raw} - the full raw message
\&    %{time_recv} - the time received
\&    %{length} - length of the raw message
\&    %{HEADER} - the full original header
\&    %{peerhost} - the sending hostname
\&    %{peerport} - port that the sending host used
\&    %{PRI} - encoded priority/facility data
\&    %{TIME} - time received in UNIX time
.Ve
.IP "\fBtimeformat\fR {timeformat}" 4
.IX Item "timeformat {timeformat}"
Define a format to use to print the time in a message. This follows
the syntax that \fIdate\fR\|(1) also uses. Example:
.Sp
.Vb 2
\&    # stock syslogd uses:
\&    timeformat "%b %e %H:%M:%S"
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIlard\fR\|(8), \fIlard.conf\fR\|(5), [\s-1RFC\s0 3164]
.SH "AUTHOR"
.IX Header "AUTHOR"
lard was written by Auke Kok, http://lard.foo\-projects.org/
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The author disclaims all copyrights and releases this document into the
public domain.
