.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LARD 1"
.TH LARD 1 "2005-03-06" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
LARD \- Log and Rotate Daemon
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Run this daemon like you would any other. The daemon automatically
forks into the background after parsing the config file:
.PP
.Vb 1
\&    # lard
.Ve
.PP
Make sure there isn't a process already occupying the /dev/log
socket or the \s-1UDP\s0 port in case you listen to remote messages:
.PP
.Vb 1
\&    # lard -r
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
lard is a replacement for styslogd and logrotate in one. It makes 
a lot of sense to combine the ability of these two programs together
since the daemon can rotate the logfiles independently of write
access to logfiles because it knows best when it's writing to them.
.PP
lard has also better pattern matching and can match regular expressions
on the message part of log messages, next to the traditional facility
and priority matching.
.PP
The output formats of the messages is custom, and a lot of fields
can be chosen to display the type of message, header details and
date/time formats. Per logfile/command these options can be adjusted.
.PP
Rotation can be done based on time or size. Time rotation data
is kept in a separate file and thus on the first run may not be accurate.
.PP
Rotation is not automatically triggered. However, you must signal
a running lard instance that it is time to rotate the logfiles it
keeps track of. The signal for this is \s-1SIGURS1\s0. You can also
call lart with the \-s option to do this automatically, without
the need to lookup the \s-1PID\s0 (which is kept by default in
/var/run/lard.pid).
.PP
The daemon can run in the foreground and dump selected messages
to stdout if you create a 'log \*(L"\-\*(R"' rule, where \*(L"\-\*(R" is the alias
used for \s-1STDOUT\s0. Any message matching the criteria will be
printed on stdout.
.PP
A message matching special criteria can also be passed directly to
a shell command. This can be usefull to send alerts directly, without
waiting for auditing tools to find them later. Beware that using
input from messages in scripts run as root could be a security
risk.
.PP
Remote reception and delivery is supported with a 'host \*(L"hostname\*(R"'
rule. Use the '\-r' option to enable the \s-1UDP\s0 socket for incoming
syslog messages. Alternatively, you can provide a 'listen' address
to change the default (which is \s-1ALL\s0 available addresses) address
and port.
.Sh "Normal Usage"
.IX Subsection "Normal Usage"
.Vb 1
\&        # lard [options]
.Ve
.PP
See \*(L"\s-1OPTIONS\s0\*(R" for details on the command line switches supported.
.SH "OPTIONS"
.IX Header "OPTIONS"
lard currently supports the following command line switches:
.IP "\fB\-h\fR, \fB\-?\fR" 4
.IX Item "-h, -?"
Prints a brief usage note.
.IP "\fB\-r\fR" 4
.IX Item "-r"
Enable remote reception. The daemon will open a \s-1UDP\s0 socket and listen
on port 514 by default.
.IP "\fB\-f\fR \fIfilename\fR" 4
.IX Item "-f filename"
Open a different configuration file instead of the default, which is
/etc/lard.conf.
.IP "\fB\-n\fR" 4
.IX Item "-n"
Do not daemonize. The daemon doesn't run in the background. Usefull
with the stdout logging possibility.
.IP "\fB\-s\fR" 4
.IX Item "-s"
Send a rotate trigger to a running lard daemon. The lard daemon will
check if any file needs to be rotated according to the criteria in
the lard.conf file, and rotate the logfiles appropriate. The client
lard process will exit immediately. Alternatively, you can also
directly send a \s-1SIGUSR1\s0 to the running lard daemon directly.
.SH "BUGS"
.IX Header "BUGS"
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
See http://lard.foo\-projects.org/ for contact information.
.Sh "Known Issues"
.IX Subsection "Known Issues"
None at this moment.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIlard\fR\|(8), \fIlard.conf\fR\|(5), [\s-1RFC\s0 3164]
.SH "AUTHOR"
.IX Header "AUTHOR"
lard was written by Auke Kok, http://lard.foo\-projects.org/
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The author disclaims all copyrights and releases this document into the
public domain.
.SH "HISTORY"
.IX Header "HISTORY"
Adapted from udp_echo_serv.pl by Lincoln D. Stein in the text
http://www.modperl.com/perl_networking/ (Chapter 18), plus data from
the Net::Syslog module as well as information in the sys/syslog.h
header file.
.PP
Parts used from syslog_snarf.pl, written by Jeremy Mates,
http://sial.org/contact/
